// mock/modelVersionsData.ts

import { ModelWithAllVersions } from "@/types/model";
import { ModelParameters } from "@/types/parameters";
import { TrainingSchedule } from "@/types/schedule";
import { ModelStatus } from "@/types/model";

export const mockModels: ModelWithAllVersions[] = [
  {
    modelId: "m001",
    name: "GPT-Finance",
    language: "Python",
    description: "A large language model for financial data processing.",
    modelVersion: [
      {
        modelId: "m001",
        version: "v1.0",
        modifiedDate: "2025-04-16 18:05",
        modifiedType: "初始化版本",
        trainingTime: 180,
        buildDate: "2025-04-10 08:00",
        status: ModelStatus.DEPLOYED,
      },
      {
        modelId: "m001",
        version: "v1.1",
        modifiedDate: "2025-04-21 18:00",
        modifiedType: "調整參數",
        trainingTime: 200,
        buildDate: "2025-04-21 08:00",
        status: ModelStatus.INACTIVE,
      },
      {
        modelId: "m001",
        version: "v2.0",
        modifiedDate: "2025-04-25 18:00",
        modifiedType: "數據集更新",
        trainingTime: 0,
        buildDate: "2025-04-25 08:00",
        status: ModelStatus.SCHEDULED,
      },
    ],
  },
  {
    modelId: "m002",
    name: "MedQA-BERT",
    language: "Java",
    description: "BERT fine-tuned for Chinese medical QA datasets.",
    modelVersion: [
      // {
      //   modelId: "m002",
      //   version: "v1.2",
      //   modifiedDate: "2025-05-07 18:00",
      //   modifiedType: "dataset expansion",
      //   trainingTime: 210,
      //   buildDate: "2025-05-07 12:00",
      //   status: ModelStatus.PENDING_DEPLOYMENT,
      // },
      // {
      //   modelId: "m002",
      //   version: "v1.1",
      //   modifiedDate: "2025-05-03 18:00",
      //   modifiedType: "loss function tune",
      //   trainingTime: 180,
      //   buildDate: "2025-05-03 12:00",
      //   status: ModelStatus.PENDING_DEPLOYMENT,
      // },
      {
        modelId: "m002",
        version: "v1.0",
        modifiedDate: "2025-04-28 18:00",
        modifiedType: "初始化版本",
        trainingTime: 150,
        buildDate: "2025-04-28 12:00",
        status: ModelStatus.PENDING_DEPLOYMENT,
      },
    ],
  },
];

export const mockModelParameters: Record<string, ModelParameters> = {
  "m001_v1.0": {
    modelVersionId: "m001_v1.0",
    learningRate: 0.001,
    batchSize: 32,
    epochs: 10,
    optimizer: "adam",
    lossFunction: "categorical_crossentropy",
    datasetVersion: "fin-v1",
    pretrainedModel: false,
    augmentation: false,
  },
  "m001_v1.1": {
    modelVersionId: "m001_v1.1",
    learningRate: 0.005,
    batchSize: 64,
    epochs: 20,
    optimizer: "adam",
    lossFunction: "categorical_crossentropy",
    datasetVersion: "fin-v2",
    pretrainedModel: false,
    augmentation: false,
  },
  "m001_v2.0": {
    modelVersionId: "m001_v2.0",
    learningRate: 0.003,
    batchSize: 16,
    epochs: 15,
    optimizer: "rmsprop",
    lossFunction: "crossentropy",
    datasetVersion: "fin-v3",
    pretrainedModel: true,
    augmentation: true,
  },
  "m002_v1.0": {
    modelVersionId: "m002_v1.0",
    learningRate: 0.001,
    batchSize: 32,
    epochs: 8,
    optimizer: "adam",
    lossFunction: "crossentropy",
    datasetVersion: "medqa-v1",
    pretrainedModel: false,
    augmentation: false,
  },
  "m002_v1.1": {
    modelVersionId: "m002_v1.1",
    learningRate: 0.0006,
    batchSize: 16,
    epochs: 10,
    optimizer: "rmsprop",
    lossFunction: "mse",
    datasetVersion: "medqa-v1",
    pretrainedModel: false,
    augmentation: false,
  },
  "m002_v1.2": {
    modelVersionId: "m002_v1.2",
    learningRate: 0.0004,
    batchSize: 20,
    epochs: 12,
    optimizer: "adam",
    lossFunction: "crossentropy",
    datasetVersion: "medqa-v2",
    pretrainedModel: true,
    augmentation: true,
  },
};

export const mockSchedules: TrainingSchedule[] = [
  // m001_v1.0
  {
    scheduleId: "s001",
    modelId: "m001",
    version: "v1.0",
    buildDate: "2025-04-19T14:05:10",
    runDate: "2025-04-20T12:00:00",
    status: "completed",
    createdAt: "2025-04-19T18:00:00",
    type: "auto",
    triggerTraining: false,
  },
  // m001_v1.1
  {
    scheduleId: "s002",
    modelId: "m001",
    version: "v1.1",
    buildDate: "2025-04-22T12:00:00",
    runDate: "2025-04-23T12:00:00",
    status: "failed",
    createdAt: "2025-04-22T18:00:00",
    type: "auto",
    triggerTraining: false,
  },
  // m001_v2.0
  {
    scheduleId: "s003",
    modelId: "m001",
    version: "v2.0",
    buildDate: "2025-04-25T12:00:00",
    runDate: "2025-04-26T12:00:00",
    status: "scheduled",
    createdAt: "2025-04-25T18:00:00",
    type: "auto",
    triggerTraining: false,
  },

  // m002_v1.0
  {
    scheduleId: "s004",
    modelId: "m002",
    version: "v1.0",
    buildDate: "2025-04-29T12:00:00",
    runDate: "2025-04-30T12:00:00",
    status: "completed",
    createdAt: "2025-04-29T18:00:00",
    type: "auto",
    triggerTraining: true,
  },
  {
    scheduleId: "s005",
    modelId: "m002",
    version: "v1.0",
    buildDate: "2025-05-01T12:00:00",
    runDate: "2025-05-02T12:00:00",
    status: "completed",
    createdAt: "2025-05-01T18:00:00",
    type: "auto",
    triggerTraining: true,
  },
  // m002_v1.1
  {
    scheduleId: "s006",
    modelId: "m002",
    version: "v1.1",
    buildDate: "2025-05-04T12:00:00",
    runDate: "2025-05-05T12:00:00",
    status: "completed",
    createdAt: "2025-05-04T18:00:00",
    type: "auto",
    triggerTraining: true,
  },
  // m002_v1.2
  {
    scheduleId: "s007",
    modelId: "m002",
    version: "v1.2",
    buildDate: "2025-05-08T12:00:00",
    runDate: "2025-05-09T12:00:00",
    status: "completed",
    createdAt: "2025-05-08T18:00:00",
    type: "auto",
    triggerTraining: true,
  },
];
